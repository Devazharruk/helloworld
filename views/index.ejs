<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Realtime Chat-like App</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f7f7f7;
    }

    #chat-container {
      width: 400px;
      background-color: white;
      border: 1px solid #ddd;
      border-radius: 10px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    #items-list {
      list-style-type: none;
      margin: 0;
      padding: 0;
      flex: 1;
      overflow-y: auto;
      padding: 20px;
      background-color: #fafafa;
    }

    #items-list li {
      background-color: #e1f7d5;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    #items-list li span {
      word-break: break-word;
    }

    #items-list li button {
      background-color: #ff6b6b;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 20px;
      cursor: pointer;
      font-size: 12px;
    }

    #add-item-form {
      display: flex;
      padding: 15px;
      background-color: #ffffff;
      border-top: 1px solid #ddd;
    }

    #add-item-form input[type="text"] {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 20px;
      margin-right: 10px;
      outline: none;
      font-size: 14px;
    }

    #add-item-form button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      font-size: 14px;
    }

    #chat-container h1 {
      text-align: center;
      background-color: #4CAF50;
      color: white;
      padding: 10px;
      margin: 0;
    }
  </style>
  <script src="/socket.io/socket.io.js"></script> <!-- Add Socket.IO script -->
</head>
<body>

  <div id="chat-container">
    <h1>Realtime Chat-like App</h1>
    
    <!-- Items List (Messages) -->
    <ul id="items-list">
      <% items.forEach(item => { %>
        <li id="item-<%= item._id %>">
          <span><%= item.name %></span>
          <button onclick="deleteItem('<%= item._id %>')">Delete</button>
        </li>
      <% }); %>
    </ul>
    
    <!-- Form to Add Item -->
    <form id="add-item-form" onsubmit="addItem(event)">
      <input type="text" name="name" placeholder="Type a message..." required>
      <button type="submit">Send</button>
    </form>
  </div>

  <script>
    const socket = io(); // Connect to the server using Socket.IO

    // Listen for 'item-added' event
    socket.on('item-added', (item) => {
      const itemsList = document.getElementById('items-list');
      const li = document.createElement('li');
      li.id = `item-${item._id}`;
      li.innerHTML = `<span>${item.name}</span> <button onclick="deleteItem('${item._id}')">Delete</button>`;
      itemsList.appendChild(li);
      
      // Scroll to the bottom after adding new item
      itemsList.scrollTop = itemsList.scrollHeight;
    });

    // Listen for 'item-deleted' event
    socket.on('item-deleted', (itemId) => {
      const itemElement = document.getElementById(`item-${itemId}`);
      if (itemElement) {
        itemElement.remove();
      }
    });

    // Add item via form submission (without refreshing)
    async function addItem(event) {
      event.preventDefault(); // Prevent page refresh

      const form = document.getElementById('add-item-form');
      const formData = new FormData(form);
      const itemName = formData.get('name');

      // Send AJAX request to add item
      const response = await fetch('/add-item', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: itemName }),
      });

      if (response.ok) {
        form.reset(); // Clear the input field
      } else {
        console.error('Error adding item');
      }
    }

    // Delete item
    async function deleteItem(itemId) {
      const response = await fetch('/delete-item', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: itemId }),
      });

      if (!response.ok) {
        console.error('Error deleting item');
      }
    }
  </script>

</body>
</html>
